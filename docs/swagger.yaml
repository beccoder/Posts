basePath: /
definitions:
  Blogs.CreateCommentRequest:
    properties:
      comment:
        type: string
      reply_comment_id:
        type: string
    required:
    - comment
    type: object
  Blogs.CreatePostRequest:
    properties:
      text:
        type: string
      title:
        type: string
    required:
    - text
    - title
    type: object
  Blogs.CreateUserRequest:
    properties:
      bio:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - email
    - first_name
    - password
    - role
    - username
    type: object
  Blogs.SignUpUserRequest:
    properties:
      bio:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - first_name
    - password
    - username
    type: object
  Blogs.UpdateCommentRequest:
    properties:
      comment:
        type: string
      reply_comment_id:
        type: string
    type: object
  Blogs.UpdatePostRequest:
    properties:
      text:
        type: string
      title:
        type: string
    type: object
  Blogs.UpdateUserRequest:
    properties:
      bio:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  handler.signInInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  http.Response:
    properties:
      data: {}
      description:
        type: string
      status:
        type: string
    type: object
host: localhost:8086
info:
  contact: {}
  description: Blogs Server in Go using Gin framework
  title: Blogs Server API
  version: "1.0"
paths:
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get a list of all users
      operationId: get-users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - ApiKeyAuth: []
      summary: Get All Users
      tags:
      - Administration
    post:
      consumes:
      - application/json
      description: Create account
      operationId: create-account
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/Blogs.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - ApiKeyAuth: []
      summary: Create User
      tags:
      - Administration
  /admin/users/{users_id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing User by ID
      operationId: delete-user
      parameters:
      - description: User ID
        in: path
        name: users_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete an existing User
      tags:
      - Administration
    get:
      consumes:
      - application/json
      description: Get a single User by providing its ID
      operationId: get-user
      parameters:
      - description: User ID
        in: path
        name: users_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a User by ID
      tags:
      - Administration
    put:
      consumes:
      - application/json
      description: Update an existing User data with new data
      operationId: update-user
      parameters:
      - description: User ID
        in: path
        name: users_id
        required: true
        type: string
      - description: new user info
        in: body
        name: new_input
        required: true
        schema:
          $ref: '#/definitions/Blogs.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - ApiKeyAuth: []
      summary: Update an existing User data
      tags:
      - Administration
  /auth/admin/sign-in:
    post:
      consumes:
      - application/json
      description: Login to admin account
      operationId: login-admin-account
      parameters:
      - description: credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.signInInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      summary: Sign In Admin
      tags:
      - Administration
  /auth/author/sign-in:
    post:
      consumes:
      - application/json
      description: Login to author account
      operationId: login-author-account
      parameters:
      - description: credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.signInInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      summary: Sign In Author
      tags:
      - Authorization
  /auth/author/sign-up:
    post:
      consumes:
      - application/json
      description: Create account for author
      operationId: create-account-author
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/Blogs.SignUpUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      summary: Sign Up Author
      tags:
      - Authorization
  /auth/user/sign-in:
    post:
      consumes:
      - application/json
      description: Login to user account
      operationId: login-user-account
      parameters:
      - description: credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.signInInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      summary: Sign In User
      tags:
      - Authorization
  /auth/user/sign-up:
    post:
      consumes:
      - application/json
      description: Create account for user
      operationId: create-account-user
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/Blogs.SignUpUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      summary: Sign Up User
      tags:
      - Authorization
  /posts:
    get:
      consumes:
      - application/json
      description: Get a list of all posts
      operationId: get-posts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - ApiKeyAuth: []
      summary: Get All Posts
      tags:
      - Posts
    post:
      consumes:
      - application/json
      description: Create a new Post with provided data
      operationId: create-post
      parameters:
      - description: post data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/Blogs.CreatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new Post
      tags:
      - Posts
  /posts/{post_id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing Post by ID
      operationId: delete-post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete an existing Post
      tags:
      - Posts
    get:
      consumes:
      - application/json
      description: Get a single Post by providing its ID
      operationId: get-post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a Post by ID
      tags:
      - Posts
    put:
      consumes:
      - application/json
      description: Update an existing Post data with new data
      operationId: update-post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      - description: new post info
        in: body
        name: new_input
        required: true
        schema:
          $ref: '#/definitions/Blogs.UpdatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - ApiKeyAuth: []
      summary: Update an existing Post data
      tags:
      - Posts
  /posts/{post_id}/comments:
    get:
      consumes:
      - application/json
      description: Get a list of all comments related to this post
      operationId: get-post-comments
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - ApiKeyAuth: []
      summary: Get All Comments
      tags:
      - Posts
    post:
      consumes:
      - application/json
      description: Create a new Comment with provided data
      operationId: comment-on-post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      - description: comment data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/Blogs.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new Comment
      tags:
      - Posts
  /posts/{post_id}/like:
    post:
      consumes:
      - application/json
      description: Like the post
      operationId: like-post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - ApiKeyAuth: []
      summary: Like the post
      tags:
      - Posts
  /posts/{post_id}/unlike:
    post:
      consumes:
      - application/json
      description: Unlike the post
      operationId: unlike-post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - ApiKeyAuth: []
      summary: Unlike the post
      tags:
      - Posts
  /posts/comments/{comment_id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing Comment of the post by ID
      operationId: delete-post-comment
      parameters:
      - description: Comment ID
        in: path
        name: comment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete an existing Comment of the post
      tags:
      - Posts
    get:
      consumes:
      - application/json
      description: Get a single Comment of the post by providing its ID
      operationId: get-post-comment
      parameters:
      - description: Comment ID
        in: path
        name: comment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a Comment by ID
      tags:
      - Posts
    put:
      consumes:
      - application/json
      description: Update an existing Comment data of the post with new data
      operationId: update-post-comment
      parameters:
      - description: Comment ID
        in: path
        name: comment_id
        required: true
        type: string
      - description: new comment data
        in: body
        name: new_input
        required: true
        schema:
          $ref: '#/definitions/Blogs.UpdateCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - ApiKeyAuth: []
      summary: Update an existing Comment data
      tags:
      - Posts
  /posts/my:
    get:
      consumes:
      - application/json
      description: Get a list of all my posts
      operationId: get-my-posts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - ApiKeyAuth: []
      summary: Get All My Posts
      tags:
      - Posts
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
